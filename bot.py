import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters, Defaults, DictPersistence
)
import openai
from openai import OpenAIError

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise EnvironmentError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –∏ —Ä–µ–∂–∏–º—ã ===
chat_histories = {}
user_modes = {}  # –•—Ä–∞–Ω–∏—Ç —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 'default', 'psychologist', 'astrologer'
MAX_HISTORY_PAIRS = 10

def get_chat_history(chat_id, mode):
    key = f"{chat_id}:{mode}"
    return chat_histories.setdefault(key, [])

def trim_chat_history(history):
    return history[-(MAX_HISTORY_PAIRS * 2):] if len(history) > MAX_HISTORY_PAIRS * 2 else history

def build_main_menu():
    keyboard = [
        [InlineKeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="mode_psychologist")],
        [InlineKeyboardButton("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥", callback_data="mode_astrologer")],
        [InlineKeyboardButton("üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="make_image")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_back_menu():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
    return InlineKeyboardMarkup(keyboard)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üòä –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å GPT-4o. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.",
        reply_markup=build_main_menu()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.", reply_markup=build_main_menu())

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == "make_image":
        context.user_data["awaiting_image"] = True
        await query.message.reply_text("üñã –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:")
        return

    if query.data == "main_menu":
        user_modes[chat_id] = "default"
        await query.message.reply_text("üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=build_main_menu())
        return

    if query.data == "mode_psychologist":
        user_modes[chat_id] = "psychologist"
        await query.message.reply_text("üß† –¢—ã –≤ —Ä–µ–∂–∏–º–µ '–õ—É—á—à–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥'. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.", reply_markup=build_back_menu())
        return

    if query.data == "mode_astrologer":
        user_modes[chat_id] = "astrologer"
        await query.message.reply_text("üîÆ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —è —Å–¥–µ–ª–∞—é –≥–æ—Ä–æ—Å–∫–æ–ø.", reply_markup=build_back_menu())
        return

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    text = update.message.text
    mode = user_modes.get(chat_id, "default")

    if context.user_data.get("awaiting_image"):
        context.user_data["awaiting_image"] = False
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            image_response = openai.images.generate(
                prompt=text,
                model="dall-e-3",
                n=1,
                size="1024x1024"
            )
            image_url = image_response.data[0].url
            await update.message.reply_photo(photo=image_url)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=build_main_menu())
        return

    history = get_chat_history(chat_id, mode)
    history.append({"role": "user", "content": text})
    history = trim_chat_history(history)
    chat_histories[f"{chat_id}:{mode}"] = history

    system_prompt = {
        "default": "–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Ç–æ—á–Ω–æ.",
        "psychologist": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ –∏ –≥–ª—É–±–æ–∫–æ. –ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ.",
        "astrologer": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ —Å –æ–±—à–∏—Ä–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, —É—á–∏—Ç—ã–≤–∞–π –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –¥–µ–ª–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã."
    }

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": system_prompt[mode]}] + history,
            temperature=0.7,
            max_tokens=1000
        )
        bot_reply = response.choices[0].message.content
        history.append({"role": "assistant", "content": bot_reply})
        chat_histories[f"{chat_id}:{mode}"] = trim_chat_history(history)

        await update.message.reply_text(bot_reply, reply_markup=build_back_menu() if mode in ["psychologist", "astrologer"] else build_main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=build_main_menu())

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    defaults = Defaults(parse_mode=None)
    persistence = DictPersistence()

    app = ApplicationBuilder() \
        .token(TELEGRAM_BOT_TOKEN) \
        .defaults(defaults) \
        .persistence(persistence) \
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
