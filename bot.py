import logging
import os
from typing import Union
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)
import openai
import base64

# === –ö–õ–Æ–ß–ò ===
TELEGRAM_BOT_TOKEN = "TELEGRAM_BOT_TOKEN"
openai.api_key = "OPENAI_API_KEY"

# === –õ–û–ì–ò ===
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# === –•–†–ê–ù–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò ===
chat_histories = {}

def get_chat_history(chat_id: Union[int, str]):
    return chat_histories.setdefault(chat_id, [])

# === GPT-4o –¢–ï–ö–°–¢–û–í–´–ô –û–¢–í–ï–¢ ===
def handle_response(chat_id: Union[int, str], text: str) -> str:
    chat_history = get_chat_history(chat_id)
    chat_history.append({"role": "user", "content": text})

    messages = [
        {"role": "system", "content": "–¢—ã –º–æ—â–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—Å–µ–≥–¥–∞ –≤–µ–∂–ª–∏–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—à—å –æ—Ç–≤–µ—Ç—ã, –¥–∞–µ—à—å –ø—Ä–∏–º–µ—Ä—ã, –∫–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ."},
        *chat_history
    ]

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.7,
        max_tokens=1000
    )

    bot_reply = response.choices[0].message.content
    chat_history.append({"role": "assistant", "content": bot_reply})
    return bot_reply

# === START ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé® –°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="make_image")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ GPT-4o. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === HELP ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî —è –ø–æ–º–æ–≥—É! üß†")

# === –°–û–û–ë–©–ï–ù–ò–ï ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_input = update.message.text
    bot_reply = handle_response(chat_id, user_input)
    await update.message.reply_text(bot_reply)

# === –ö–ù–û–ü–ö–ò ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "make_image":
        await query.edit_message_text("–û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ‚Äî –∏ —è —Å–æ–∑–¥–∞–º –µ–≥–æ! üñºÔ∏è")
        context.user_data["awaiting_image_prompt"] = True

# === –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===
async def handle_image_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_image_prompt"):
        prompt = update.message.text
        context.user_data["awaiting_image_prompt"] = False

        response = openai.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        image_url = response.data[0].url
        await update.message.reply_photo(photo=image_url, caption=f"–í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: \"{prompt}\" üé®")
    else:
        await handle_message(update, context)

# === MAIN ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_image_prompt))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()
