import logging
import os
import asyncio
import aiohttp
import subprocess
import tarfile

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ChatAction
import openai

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise EnvironmentError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI ===
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# === –ü—É—Ç–∏ –∏ URL –¥–ª—è FFMPEG ===
FFMPEG_STATIC_URL = "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
BIN_DIR = "./bin"
FFMPEG_PATH = os.path.join(BIN_DIR, "ffmpeg")


# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def ensure_ffmpeg():
    if os.path.isfile(FFMPEG_PATH):
        logger.info(f"‚úÖ FFMPEG —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ: {FFMPEG_PATH}")
        os.chmod(FFMPEG_PATH, 0o755)
        return

    logger.info("‚¨áÔ∏è FFMPEG –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∏–≤–∞—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∏–ª–¥...")
    os.makedirs(BIN_DIR, exist_ok=True)
    archive_path = os.path.join(BIN_DIR, "ffmpeg.tar.xz")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(FFMPEG_STATIC_URL) as resp:
                if resp.status != 200:
                    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å FFMPEG. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {resp.status}")
                with open(archive_path, "wb") as f:
                    f.write(await resp.read())
        logger.info("üì¶ –ê—Ä—Ö–∏–≤ FFMPEG —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.")

        logger.info("–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤ FFMPEG...")
        with tarfile.open(archive_path, "r:xz") as tar:
            for member in tar.getmembers():
                if member.name.endswith('/ffmpeg'):
                    member.name = os.path.basename(member.name)
                    tar.extract(member, path=BIN_DIR)
                    break
        
        if not os.path.isfile(FFMPEG_PATH):
            raise RuntimeError("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ")

        os.chmod(FFMPEG_PATH, 0o755)
        logger.info(f"‚úÖ FFMPEG –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: {FFMPEG_PATH}")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ FFMPEG: {e}")
        raise
    finally:
        if os.path.exists(archive_path):
            os.remove(archive_path)

# === –ò—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ ===
chat_histories = { "default": {}, "psychologist": {}, "astrologer": {} }
MAX_HISTORY_PAIRS = 10

def get_chat_history(chat_id, mode):
    return chat_histories.get(mode, {}).setdefault(chat_id, [])

def trim_chat_history(history):
    if len(history) > MAX_HISTORY_PAIRS * 2:
        return history[-(MAX_HISTORY_PAIRS * 2):]
    return history

def build_keyboard():
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ SEO ---
    keyboard = [
        [KeyboardButton("üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"), KeyboardButton("üìà SEO")],
        [KeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥"), KeyboardButton("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üòä –ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å GPT-4o.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=build_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∂–∏–º–∞—Ö:\n\n"
        "üåç **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ** - —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "üìà **SEO** - –Ω–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n"
        "üí¨ **–ü—Å–∏—Ö–æ–ª–æ–≥** - –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂—É.\n"
        "üîÆ **–ê—Å—Ç—Ä–æ–ª–æ–≥** - –¥–∞–º —Å–æ–≤–µ—Ç.\n\n"
        "–Ø —Ç–∞–∫–∂–µ —É–º–µ—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        reply_markup=build_keyboard()
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ogg_path = None
    mp3_path = None
    try:
        file_id = update.message.voice.file_id
        voice_file = await context.bot.get_file(file_id)
        
        ogg_path = f"voice_{file_id}.ogg"
        mp3_path = f"voice_{file_id}.mp3"

        await voice_file.download_to_drive(ogg_path)
        await update.message.chat.send_action(action=ChatAction.TYPING)

        process = await asyncio.create_subprocess_exec(
            FFMPEG_PATH, "-i", ogg_path, "-y", mp3_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ffmpeg: {stderr.decode()}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        with open(mp3_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(model="whisper-1", file=audio_file)
        
        update.message.text = transcript.text
        await handle_message(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_voice: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
        
    finally:
        if ogg_path and os.path.exists(ogg_path): os.remove(ogg_path)
        if mp3_path and os.path.exists(mp3_path): os.remove(mp3_path)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    mode = context.user_data.get("mode", "default")
    
    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ---
    if text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data["mode"] = "default"
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=build_keyboard())
        return
    if text == "üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        context.user_data["mode"] = "image"
        await update.message.reply_text("üñã –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    if text == "üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥":
        context.user_data["mode"] = "psychologist"
        await update.message.reply_text("üß† –Ø –≤–∞—Å —Å–ª—É—à–∞—é...")
        return
    if text == "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥":
        context.user_data["mode"] = "astrologer"
        await update.message.reply_text("‚ú® –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
        return
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ SEO ---
    if text == "üìà SEO":
        context.user_data["mode"] = "seo"
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –∏ —è —Å–æ–∑–¥–∞–º SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries (1500-2000 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
    if mode == "image":
        context.user_data["mode"] = "default"
        await update.message.reply_text("üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", reply_markup=build_keyboard())
        # ... (–∫–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        return
        
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ SEO ---
    if mode == "seo":
        context.user_data["mode"] = "default"  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        keywords = text
        await update.message.reply_text(
            "‚úÖ –ü—Ä–∏–Ω—è–ª. –ì–µ–Ω–µ—Ä–∏—Ä—É—é SEO-—Ç–µ–∫—Å—Ç –ø–æ –≤–∞—à–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...",
            reply_markup=build_keyboard()
        )
        await update.message.chat.send_action(action=ChatAction.TYPING)

        try:
            seo_system_prompt = (
                "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞—é—â–∏–π, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries. "
                "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–º–æ–º —Å—Ç—Ä–æ–≥–æ –æ—Ç 1500 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤. "
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –∏—Ö –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É. "
                "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–º, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º –Ω–∞ –∞–±–∑–∞—Ü—ã, –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown –∏–ª–∏ HTML —Ç–µ–≥–∏ –≤ –æ—Ç–≤–µ—Ç–µ, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
            )
            
            messages = [
                {"role": "system", "content": seo_system_prompt},
                {"role": "user", "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}"}
            ]

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                temperature=0.7,
                max_tokens=800  # ~2000 —Å–∏–º–≤–æ–ª–æ–≤ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 500-600 —Ç–æ–∫–µ–Ω–æ–≤, –±–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º
            )
            seo_text = response.choices[0].message.content.strip()
            
            # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–≥–∫–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            final_response = (
                f"‚úÖ *–ì–æ—Ç–æ–≤–æ\\!* \n\n"
                f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(seo_text)} —Å–∏–º–≤–æ–ª–æ–≤\\.\n\n"
                f"```\n{seo_text}\n```"
            )
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—à–µ–π –æ–±–µ—Ä—Ç–∫–µ
            await update.message.reply_text(final_response, parse_mode='MarkdownV2')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-—Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-—Ç–µ–∫—Å—Ç–∞.")
        return

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —á–∞—Ç–∞ (–ø—Å–∏—Ö–æ–ª–æ–≥, –∞—Å—Ç—Ä–æ–ª–æ–≥, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ---
    history = get_chat_history(chat_id, mode)
    history.append({"role": "user", "content": text})
    
    system_prompts = {
        "default": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, <i> –¥–ª—è –∫—É—Ä—Å–∏–≤–∞, <code> –¥–ª—è –∫–æ–¥–∞.",
        "psychologist": "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ: <b> –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤, <i> –¥–ª—è –º—è–≥–∫–∏—Ö –≤—ã–¥–µ–ª–µ–Ω–∏–π.",
        "astrologer": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b> –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, <i> –¥–ª—è —Ü–∏—Ç–∞—Ç –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–π."
    }
    system_prompt = system_prompts.get(mode, system_prompts["default"])
    messages = [{"role": "system", "content": system_prompt}] + trim_chat_history(history)
    
    try:
        await update.message.chat.send_action(action=ChatAction.TYPING)
        response = client.chat.completions.create(model="gpt-4o", messages=messages, temperature=0.7, max_tokens=1500)
        bot_reply = response.choices[0].message.content
        history.append({"role": "assistant", "content": bot_reply})
        
        await update.message.reply_text(
            bot_reply,
            parse_mode='HTML',
            reply_markup=build_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main() -> None:
    await ensure_ffmpeg()
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        while True:
            await asyncio.sleep(3600)
    finally:
        if application.updater and application.updater.running:
            await application.updater.stop()
        if application.running:
            await application.stop()
        await application.shutdown()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
