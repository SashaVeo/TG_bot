import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters, Defaults
)
import openai
from openai import OpenAIError

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise EnvironmentError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ ===
chat_histories = {}
MAX_HISTORY_PAIRS = 10

def get_chat_history(chat_id):
    return chat_histories.setdefault(chat_id, [])

def trim_chat_history(history):
    return history[-(MAX_HISTORY_PAIRS * 2):] if len(history) > MAX_HISTORY_PAIRS * 2 else history

def build_keyboard():
    keyboard = [[InlineKeyboardButton("üåç –°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="make_image")]]
    return InlineKeyboardMarkup(keyboard)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"/start –æ—Ç {update.effective_user.id}")
    await update.message.reply_text(
        "üòä –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å GPT-4o. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É üëá",
        reply_markup=build_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.", reply_markup=build_keyboard())

# === –ö–Ω–æ–ø–∫–∏ ===
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logging.info(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {query.data} –æ—Ç {query.from_user.id}")

    if query.data == "make_image":
        context.user_data["awaiting_image"] = True
        await query.message.reply_text("üñã –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É!")

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    text = update.message.text
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
    if context.user_data.get("awaiting_image"):
        context.user_data["awaiting_image"] = False
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        try:
            image_response = openai.images.generate(
                prompt=text,
                model="dall-e-3",
                n=1,
                size="1024x1024"
            )
            image_url = image_response.data[0].url
            await update.message.reply_photo(photo=image_url)
            logging.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except OpenAIError as e:
            logging.error(f"OpenAI –æ—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=build_keyboard())
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ GPT ---
    history = get_chat_history(chat_id)
    history.append({"role": "user", "content": text})
    history = trim_chat_history(history)
    chat_histories[chat_id] = history

    messages = [{"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Ç–æ—á–Ω–æ."}] + history

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.8,
            max_tokens=1000
        )
        bot_reply = response.choices[0].message.content
        history.append({"role": "assistant", "content": bot_reply})
        chat_histories[chat_id] = trim_chat_history(history)

        await update.message.reply_text(bot_reply, reply_markup=build_keyboard())
    except OpenAIError as e:
        logging.error(f"OpenAI –æ—à–∏–±–∫–∞ –≤ chat: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –æ—Ç GPT.", reply_markup=build_keyboard())

from telegram.ext import DictPersistence

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    defaults = Defaults(parse_mode=None)
    persistence = DictPersistence()  # –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

    app = ApplicationBuilder()\
        .token(TELEGRAM_BOT_TOKEN)\
        .defaults(defaults)\
        .persistence(persistence)\
        .build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è.")
    app.run_polling()
