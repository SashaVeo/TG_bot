import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters
)
import openai
from telegram.ext import CallbackQueryHandler

app.add_handler(CallbackQueryHandler(handle_button_click))

# –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ò—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
chat_histories = {}

# === –§—É–Ω–∫—Ü–∏–∏ ===
def get_chat_history(chat_id):
    return chat_histories.setdefault(chat_id, [])

def build_keyboard():
    keyboard = [[InlineKeyboardButton("üåç –°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="make_image")]]
    return InlineKeyboardMarkup(keyboard)
    

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üòä –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPT-4o. –ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É",
        reply_markup=build_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É")

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "make_image":
        await query.message.reply_text("üñã –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏ —è —Å–¥–µ–ª–∞—é –∫–∞—Ä—Ç–∏–Ω–∫—É!")
        chat_histories[query.message.chat.id].append({"image_mode": True})

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text
    history = get_chat_history(chat_id)

    if history and isinstance(history[-1], dict) and history[-1].get("image_mode"):
        history.pop()
        image_response = client.images.generate(prompt=text, model="dall-e-3", n=1, size="1024x1024")
        image_url = image_response.data[0].url
        await update.message.reply_photo(photo=image_url)
        return

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "user", "content": text})
    messages = [{
        "role": "system",
        "content": "–¢—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π GPT-4o, –¥–∞–µ—à—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —Å—Å—ã–ª–∞–µ—à—å—Å—è –Ω–∞ —Ü–µ–ø–æ—á–∫—É –¥–∏–∞–ª–æ–≥–∞."
    }] + history

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.8,
        max_tokens=1000
    )
    bot_reply = response.choices[0].message.content
    history.append({"role": "assistant", "content": bot_reply})
    await update.message.reply_text(bot_reply, reply_markup=build_keyboard())
    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_input = update.message.text

    # –µ—Å–ª–∏ –∂–¥–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if context.user_data.get("awaiting_image_description"):
        context.user_data["awaiting_image_description"] = False
        await update.message.reply_text("üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")
        
        # –≤—ã–∑–æ–≤ DALL¬∑E –∏–ª–∏ image API
        response = openai.Image.create(
            prompt=user_input,
            n=1,
            size="512x512"
        )
        image_url = response['data'][0]['url']
        await update.message.reply_photo(image_url)
        return
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

keyboard = [
    [InlineKeyboardButton("üñº –°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate_image")]
]
reply_markup = InlineKeyboardMarkup(keyboard)

await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
