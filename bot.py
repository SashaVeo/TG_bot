import logging
import os
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, Defaults
)
import openai
from openai import OpenAIError

# === –ö–ª—é—á–∏ API ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –ò—Å—Ç–æ—Ä–∏–∏ ===
chat_histories = {
    "default": {},
    "psychologist": {},
    "astrologer": {}
}
MAX_HISTORY_PAIRS = 10

def get_chat_history(chat_id, mode):
    return chat_histories.setdefault(mode, {}).setdefault(chat_id, [])

def trim_chat_history(history):
    return history[-(MAX_HISTORY_PAIRS * 2):]

def build_keyboard(mode="default"):
    if mode == "default":
        return ReplyKeyboardMarkup([
            [KeyboardButton("üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
            [KeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥")],
            [KeyboardButton("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥")]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([[KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "default"
    await update.message.reply_text(
        "üòä –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å GPT-4o. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=build_keyboard())

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    mode = context.user_data.get("mode", "default")

    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    if text == "üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        context.user_data["mode"] = "image"
        await update.message.reply_text("üñã –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å:", reply_markup=build_keyboard("image"))
        return
    if text == "üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥":
        context.user_data["mode"] = "psychologist"
        await update.message.reply_text("üß† –Ø —Å–ª—É—à–∞—é. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç.", reply_markup=build_keyboard("psychologist"))
        return
    if text == "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥":
        context.user_data["mode"] = "astrologer"
        await update.message.reply_text("üîÆ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥. –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.", reply_markup=build_keyboard("astrologer"))
        return
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        context.user_data["mode"] = "default"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=build_keyboard("default"))
        return

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
    if mode == "image":
        context.user_data["mode"] = "default"
        await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            response = openai.images.generate(
                prompt=text,
                model="dall-e-3",
                n=1,
                size="1024x1024"
            )
            image_url = response.data[0].url
            await update.message.reply_photo(photo=image_url, reply_markup=build_keyboard())
        except OpenAIError as e:
            logging.error(f"DALL¬∑E Error: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=build_keyboard())
        return

    # === GPT –æ—Ç–≤–µ—Ç ===
    history = get_chat_history(chat_id, mode)
    history.append({"role": "user", "content": text})
    history = trim_chat_history(history)

    system_prompts = {
        "default": "–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.",
        "psychologist": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ì–æ–≤–æ—Ä–∏ –º—è–≥–∫–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ, –∫–∞–∫ –ª—É—á—à–∏–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç.",
        "astrologer": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π, –∫–∞–∫ –∞—Å—Ç—Ä–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü—Ä–∏–º–µ–Ω—è–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è."
    }

    messages = [{"role": "system", "content": system_prompts[mode]}] + history

    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.7,
            max_tokens=1000
        )
        reply = response.choices[0].message.content
        history.append({"role": "assistant", "content": reply})
        chat_histories[mode][chat_id] = trim_chat_history(history)
        await update.message.reply_text(reply, reply_markup=build_keyboard(mode="default" if mode == "image" else mode))
    except OpenAIError as e:
        logging.error(f"GPT Error: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=build_keyboard(mode))

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    defaults = Defaults(parse_mode=None)

    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).defaults(defaults).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()
