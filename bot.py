import logging
import os
import asyncio
import aiohttp
import subprocess
import tarfile
import telegram # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ChatAction
import openai

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise EnvironmentError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI ===
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# === –ü—É—Ç–∏ –∏ URL –¥–ª—è FFMPEG ===
FFMPEG_STATIC_URL = "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
BIN_DIR = "./bin"
FFMPEG_PATH = os.path.join(BIN_DIR, "ffmpeg")


# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def ensure_ffmpeg():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∏–ª–¥,
    —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏ –¥–µ–ª–∞–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º.
    """
    if os.path.isfile(FFMPEG_PATH):
        logger.info(f"‚úÖ FFMPEG —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ: {FFMPEG_PATH}")
        os.chmod(FFMPEG_PATH, 0o755)
        return
    logger.info("‚¨áÔ∏è FFMPEG –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∏–≤–∞—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∏–ª–¥...")
    os.makedirs(BIN_DIR, exist_ok=True)
    archive_path = os.path.join(BIN_DIR, "ffmpeg.tar.xz")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(FFMPEG_STATIC_URL) as resp:
                if resp.status != 200:
                    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å FFMPEG. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {resp.status}")
                with open(archive_path, "wb") as f:
                    f.write(await resp.read())
        logger.info("üì¶ –ê—Ä—Ö–∏–≤ FFMPEG —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.")
        logger.info("–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤ FFMPEG...")
        with tarfile.open(archive_path, "r:xz") as tar:
            for member in tar.getmembers():
                if member.name.endswith('/ffmpeg'):
                    member.name = os.path.basename(member.name)
                    tar.extract(member, path=BIN_DIR)
                    break
        if not os.path.isfile(FFMPEG_PATH):
            raise RuntimeError("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ")
        os.chmod(FFMPEG_PATH, 0o755)
        logger.info(f"‚úÖ FFMPEG –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: {FFMPEG_PATH}")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ FFMPEG: {e}")
        raise
    finally:
        if os.path.exists(archive_path):
            os.remove(archive_path)

# === –ò—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ ===
chat_histories = { "default": {}, "psychologist": {}, "astrologer": {} }
MAX_HISTORY_PAIRS = 10

def get_chat_history(chat_id, mode):
    return chat_histories.get(mode, {}).setdefault(chat_id, [])

def trim_chat_history(history):
    if len(history) > MAX_HISTORY_PAIRS * 2:
        return history[-(MAX_HISTORY_PAIRS * 2):]
    return history

def build_keyboard():
    keyboard = [
        [KeyboardButton("üìà SEO"), KeyboardButton("üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
        [KeyboardButton("üíÅ‚Äç‚ôÄÔ∏è –ü–æ–º–æ—â–Ω–∏—Ü–∞"), KeyboardButton("üßò‚Äç‚ôÄÔ∏è –û–ª–µ—Å—è")],
        [KeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥"), KeyboardButton("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üòä –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å GPT-4o.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=build_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∂–∏–º–∞—Ö:\n\n"
        "üìà **SEO** - –Ω–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n"
        "üíÅ‚Äç‚ôÄÔ∏è **–ü–æ–º–æ—â–Ω–∏—Ü–∞** - —Å–æ—Å—Ç–∞–≤–ª—é –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞.\n"
        "üßò‚Äç‚ôÄÔ∏è **–û–ª–µ—Å—è** - –Ω–∞–ø–∏—à—É –ø–æ—Å—Ç –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—Ç –∏–º–µ–Ω–∏ –û–ª–µ—Å–∏.\n"
        "üåç **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ** - —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "üí¨ **–ü—Å–∏—Ö–æ–ª–æ–≥** - –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂—É.\n"
        "üîÆ **–ê—Å—Ç—Ä–æ–ª–æ–≥** - –¥–∞–º —Å–æ–≤–µ—Ç.\n\n"
        "–Ø —Ç–∞–∫–∂–µ —É–º–µ—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        reply_markup=build_keyboard()
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ogg_path = None
    mp3_path = None
    try:
        file_id = update.message.voice.file_id
        voice_file = await context.bot.get_file(file_id)
        ogg_path = f"voice_{file_id}.ogg"
        mp3_path = f"voice_{file_id}.mp3"
        await voice_file.download_to_drive(ogg_path)
        await update.message.chat.send_action(action=ChatAction.TYPING)
        process = await asyncio.create_subprocess_exec(
            FFMPEG_PATH, "-i", ogg_path, "-y", mp3_path,
            stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        await process.communicate()
        if process.returncode != 0:
            raise subprocess.CalledProcessError(process.returncode, cmd=FFMPEG_PATH)
        with open(mp3_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(model="whisper-1", file=audio_file)
        update.message.text = transcript.text
        await handle_message(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_voice: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
    finally:
        if ogg_path and os.path.exists(ogg_path): os.remove(ogg_path)
        if mp3_path and os.path.exists(mp3_path): os.remove(mp3_path)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    mode = context.user_data.get("mode", "default")
    
    # === –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ===
    if text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data["mode"] = "default"
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=build_keyboard())
        return
    if text == "üìà SEO":
        context.user_data["mode"] = "seo"
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è SEO-–æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."
        )
        return
    if text == "üíÅ‚Äç‚ôÄÔ∏è –ü–æ–º–æ—â–Ω–∏—Ü–∞":
        context.user_data["mode"] = "assistant"
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞."
        )
        return
    if text == "üßò‚Äç‚ôÄÔ∏è –û–ª–µ—Å—è":
        context.user_data["mode"] = "olesya"
        await update.message.reply_text(
            "–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å –Ω–∞ —Ä–µ–∂–∏–º –û–ª–µ—Å–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–º—É –∏–ª–∏ –∏–¥–µ—é –¥–ª—è –ø–æ—Å—Ç–∞, –∏ —è –Ω–∞–ø–∏—à—É —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ –≤ –µ–µ —Å—Ç–∏–ª–µ."
        )
        return
    if text == "üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        context.user_data["mode"] = "image"
        await update.message.reply_text("üñã –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    if text == "üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥":
        context.user_data["mode"] = "psychologist"
        await update.message.reply_text("üß† –Ø –≤–∞—Å —Å–ª—É—à–∞—é...")
        return
    if text == "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥":
        context.user_data["mode"] = "astrologer"
        await update.message.reply_text("‚ú® –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
        return

    # === –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞ ===
    if mode == "olesya":
        context.user_data["mode"] = "default"
        post_topic = text
        await update.message.reply_text("‚úÖ –ü–æ–Ω—è–ª–∞. –ü–∏—à—É –ø–æ—Å—Ç –æ—Ç –∏–º–µ–Ω–∏ –û–ª–µ—Å–∏...", reply_markup=build_keyboard())
        await update.message.chat.send_action(action=ChatAction.TYPING)
        try:
            olesya_system_prompt = (
                "–¢—ã ‚Äî –û–ª–µ—Å—è, 42-–ª–µ—Ç–Ω—è—è –∂–µ–Ω—â–∏–Ω–∞, –¥—É—Ö–æ–≤–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ —ç–Ω–µ—Ä–≥–æ–ø—Ä–∞–∫—Ç–∏–∫. "
                "–¢—ã –≤–µ—Ä–∏—à—å –≤ —Ä–µ–∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏—é, –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, —Å–∏–ª—É —Ä–æ–¥–∞ –∏ –µ–¥–∏–Ω—Å—Ç–≤–æ –≤—Å–µ—Ö —Ä–µ–ª–∏–≥–∏–π –≤ –ª—é–±–≤–∏ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏. "
                "–¢–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ ‚Äî —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ–ª–æ–º, —ç–Ω–µ—Ä–≥–∏—è–º–∏ –∏ —Ç–∞–Ω—Ç—Ä–æ–π –¥–ª—è –∏—Å—Ü–µ–ª–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏ —Ç–µ–ª–µ—Å–Ω—ã—Ö —Ç—Ä–∞–≤–º, –≤ –æ–±—Ö–æ–¥ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏. "
                "–¢–≤–æ–π —Å—Ç–∏–ª—å –ø–∏—Å—å–º–∞ ‚Äî –º—è–≥–∫–∏–π, –º—É–¥—Ä—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ –æ—á–µ–Ω—å –ª–∏—á–Ω—ã–π. –¢—ã –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫ –∂–µ–Ω—â–∏–Ω–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–∞ '–¥–æ—Ä–æ–≥–∏–µ', '–ª—é–±–∏–º—ã–µ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ'. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é —Ç–µ–º—É. –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ–ª—å–∑—É —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–æ–º –∏ —ç–Ω–µ—Ä–≥–∏—è–º–∏, –ø–æ–º–æ–≥–∞—Ç—å —á–∏—Ç–∞—Ç–µ–ª—å–Ω–∏—Ü–∞–º –ø—Ä–∏–Ω—è—Ç—å —Å–µ–±—è –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–µ—Ä–¥—Ü–µ –¥–ª—è –ª—é–±–≤–∏. "
                "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –∏—Ö –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä–µ–∑ –ª—é–±–æ–≤—å, –∞ –Ω–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ö. "
                "–ò—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ HTML-—Ç–µ–≥–∏ <b> –∏ <i> –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º—ã—Å–ª–µ–π."
            )
            messages = [
                {"role": "system", "content": olesya_system_prompt},
                {"role": "user", "content": f"–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É: {post_topic}"}
            ]
            response = client.chat.completions.create(
                model="gpt-4o", messages=messages, temperature=0.8, max_tokens=1500
            )
            post_text = response.choices[0].message.content.strip()
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                await update.message.reply_text(post_text, parse_mode='HTML', reply_markup=build_keyboard())
            except telegram.error.BadRequest as e:
                if 'entities' in str(e):
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—à–∏–±–∫–∞: {e}")
                    await update.message.reply_text(post_text, reply_markup=build_keyboard())
                else:
                    raise e
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –û–ª–µ—Å–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")
        return

    if mode == "assistant":
        context.user_data["mode"] = "default"
        customer_feedback = text
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–ª—é –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...", reply_markup=build_keyboard())
        await update.message.chat.send_action(action=ChatAction.TYPING)
        try:
            assistant_system_prompt = (
                "–¢—ã ‚Äî –ï–≤–≥–µ–Ω–∏—è –õ–∞–Ω—Ü–æ–≤–∞, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∑–∞–±–æ—Ç–µ –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –≤ –∫–æ–º–ø–∞–Ω–∏–∏ '–ù–µ–º–µ—Ü–∫–∏–π –¥–æ–º'. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–µ–∂–ª–∏–≤–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. "
                "–í –∫–æ–Ω—Ü–µ –ö–ê–ñ–î–û–ì–û –æ—Ç–≤–µ—Ç–∞, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —Ç—ã –û–ë–Ø–ó–ê–ù–ê –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø–æ–¥–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö:\n"
                "–í–∞—à \"–ù–µ–º–µ—Ü–∫–∏–π –¥–æ–º\"\n"
                "–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–±–æ—Ç—ã –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö\n"
                "–ï–≤–≥–µ–Ω–∏—è –õ–∞–Ω—Ü–æ–≤–∞"
            )
            messages = [
                {"role": "system", "content": assistant_system_prompt},
                {"role": "user", "content": f"–í–æ—Ç –æ—Ç–∑—ã–≤/–≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å:\n\n---\n\n{customer_feedback}"}
            ]
            response = client.chat.completions.create(
                model="gpt-4o", messages=messages, temperature=0.5, max_tokens=500
            )
            assistant_reply = response.choices[0].message.content.strip()
            final_response = (
                f"‚úÖ *–û—Ç–≤–µ—Ç –æ—Ç –ï–≤–≥–µ–Ω–∏–∏ –õ–∞–Ω—Ü–æ–≤–æ–π –≥–æ—Ç–æ–≤:*\n\n"
                f"```\n{assistant_reply}\n```"
            )
            await update.message.reply_text(final_response, parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")
        return

    if mode == "seo":
        context.user_data["mode"] = "default"
        keywords = text
        await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—è–ª. –ì–µ–Ω–µ—Ä–∏—Ä—É—é SEO-—Ç–µ–∫—Å—Ç...", reply_markup=build_keyboard())
        await update.message.chat.send_action(action=ChatAction.TYPING)
        try:
            seo_system_prompt = (
                "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞—é—â–∏–π, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ Wildberries. "
                "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–º–æ–º —Å—Ç—Ä–æ–≥–æ –æ—Ç 1500 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤. "
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –∏—Ö –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown –∏–ª–∏ HTML —Ç–µ–≥–∏ –≤ –æ—Ç–≤–µ—Ç–µ, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
            )
            messages = [
                {"role": "system", "content": seo_system_prompt},
                {"role": "user", "content": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}"}
            ]
            response = client.chat.completions.create(
                model="gpt-4o", messages=messages, temperature=0.7, max_tokens=800
            )
            seo_text = response.choices[0].message.content.strip()
            final_response = (
                f"‚úÖ *–ì–æ—Ç–æ–≤–æ\\!* \n\n"
                f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(seo_text)} —Å–∏–º–≤–æ–ª–æ–≤\\.\n\n"
                f"```\n{seo_text}\n```"
            )
            await update.message.reply_text(final_response, parse_mode='MarkdownV2')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-—Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-—Ç–µ–∫—Å—Ç–∞.")
        return

    if mode == "image":
        context.user_data["mode"] = "default"
        await update.message.reply_text("üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", reply_markup=build_keyboard())
        await update.message.chat.send_action(action=ChatAction.UPLOAD_PHOTO)
        try:
            response = client.images.generate(model="dall-e-3", prompt=text, n=1, size="1024x1024", quality="standard")
            await update.message.reply_photo(photo=response.data[0].url, caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    # === –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —á–∞—Ç–∞ ===
    history = get_chat_history(chat_id, mode)
    history.append({"role": "user", "content": text})
    system_prompts = {
        "default": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, <i> –¥–ª—è –∫—É—Ä—Å–∏–≤–∞.",
        "psychologist": "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b> –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤, <i> –¥–ª—è –º—è–≥–∫–∏—Ö –≤—ã–¥–µ–ª–µ–Ω–∏–π.",
        "astrologer": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <b> –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, <i> –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π."
    }
    system_prompt = system_prompts.get(mode, system_prompts["default"])
    messages = [{"role": "system", "content": system_prompt}] + trim_chat_history(history)
    try:
        await update.message.chat.send_action(action=ChatAction.TYPING)
        response = client.chat.completions.create(model="gpt-4o", messages=messages, temperature=0.7, max_tokens=1500)
        bot_reply = response.choices[0].message.content
        history.append({"role": "assistant", "content": bot_reply})
        await update.message.reply_text(bot_reply, parse_mode='HTML', reply_markup=build_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main() -> None:
    await ensure_ffmpeg()
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        while True:
            await asyncio.sleep(3600)
    finally:
        if application.updater and application.updater.running:
            await application.updater.stop()
        if application.running:
            await application.stop()
        await application.shutdown()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
