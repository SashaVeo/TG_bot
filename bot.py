import logging
import os
import asyncio
import aiohttp
import subprocess
import tarfile # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å .tar.gz –∞—Ä—Ö–∏–≤–∞–º–∏

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ChatAction
import openai

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise EnvironmentError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI ===
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# === –ü—É—Ç–∏ –∏ URL –¥–ª—è FFMPEG ===
# URL –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏ ffmpeg –ø–æ–¥ Linux x86-64 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤)
FFMPEG_STATIC_URL = "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
BIN_DIR = "./bin"
FFMPEG_PATH = os.path.join(BIN_DIR, "ffmpeg")


# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def ensure_ffmpeg():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ffmpeg. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∏–ª–¥,
    —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏ –¥–µ–ª–∞–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º.
    """
    if os.path.isfile(FFMPEG_PATH):
        logger.info(f"‚úÖ FFMPEG —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ: {FFMPEG_PATH}")
        os.chmod(FFMPEG_PATH, 0o755)
        return

    logger.info("‚¨áÔ∏è FFMPEG –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–∞—á–∏–≤–∞—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∏–ª–¥...")
    os.makedirs(BIN_DIR, exist_ok=True)
    archive_path = os.path.join(BIN_DIR, "ffmpeg.tar.xz")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(FFMPEG_STATIC_URL) as resp:
                if resp.status != 200:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å FFMPEG. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {resp.status}")
                    raise RuntimeError("Download of ffmpeg failed")
                with open(archive_path, "wb") as f:
                    f.write(await resp.read())
        logger.info("üì¶ –ê—Ä—Ö–∏–≤ FFMPEG —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.")

        logger.info("–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤ FFMPEG...")
        with tarfile.open(archive_path, "r:xz") as tar:
            for member in tar.getmembers():
                if member.name.endswith('/ffmpeg'):
                    member.name = os.path.basename(member.name)
                    tar.extract(member, path=BIN_DIR)
                    logger.info(f"–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω {member.name} –≤ {BIN_DIR}")
                    break
        
        if not os.path.isfile(FFMPEG_PATH):
            raise RuntimeError("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ")

        os.chmod(FFMPEG_PATH, 0o755)
        logger.info(f"‚úÖ FFMPEG –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: {FFMPEG_PATH}")

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ FFMPEG: {e}")
        raise
    finally:
        if os.path.exists(archive_path):
            os.remove(archive_path)

# === –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===
# ... (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–Ω–∞ –Ω–µ –º–µ–Ω—è–ª–∞—Å—å)
# === –ò—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
chat_histories = { "default": {}, "psychologist": {}, "astrologer": {} }
MAX_HISTORY_PAIRS = 10

def get_chat_history(chat_id, mode):
    return chat_histories.get(mode, {}).setdefault(chat_id, [])

def trim_chat_history(history):
    if len(history) > MAX_HISTORY_PAIRS * 2:
        return history[-(MAX_HISTORY_PAIRS * 2):]
    return history

def build_keyboard():
    keyboard = [
        [KeyboardButton("üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
        [KeyboardButton("üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥"), KeyboardButton("üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üòä –ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å GPT-4o.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∂–∏–º–æ–≤ –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=build_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∂–∏–º–∞—Ö:\n\n"
        "üåç **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ** - —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "üí¨ **–ü—Å–∏—Ö–æ–ª–æ–≥** - –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂—É.\n"
        "üîÆ **–ê—Å—Ç—Ä–æ–ª–æ–≥** - –¥–∞–º —Å–æ–≤–µ—Ç.\n\n"
        "–Ø —Ç–∞–∫–∂–µ —É–º–µ—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        reply_markup=build_keyboard()
    )

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ogg_path = None
    mp3_path = None
    try:
        file_id = update.message.voice.file_id
        voice_file = await context.bot.get_file(file_id)
        
        ogg_path = f"voice_{file_id}.ogg"
        mp3_path = f"voice_{file_id}.mp3"

        await voice_file.download_to_drive(ogg_path)
        await update.message.chat.send_action(action=ChatAction.TYPING)

        process = await asyncio.create_subprocess_exec(
            FFMPEG_PATH, "-i", ogg_path, "-y", mp3_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ffmpeg: {stderr.decode()}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        with open(mp3_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(model="whisper-1", file=audio_file)
        
        update.message.text = transcript.text
        await handle_message(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_voice: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
        
    finally:
        if ogg_path and os.path.exists(ogg_path): os.remove(ogg_path)
        if mp3_path and os.path.exists(mp3_path): os.remove(mp3_path)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    mode = context.user_data.get("mode", "default")
    if text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data["mode"] = "default"
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=build_keyboard())
        return
    if text == "üåç –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        context.user_data["mode"] = "image"
        await update.message.reply_text("üñã –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    if text == "üí¨ –ü—Å–∏—Ö–æ–ª–æ–≥":
        context.user_data["mode"] = "psychologist"
        await update.message.reply_text("üß† –Ø –≤–∞—Å —Å–ª—É—à–∞—é...")
        return
    if text == "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥":
        context.user_data["mode"] = "astrologer"
        await update.message.reply_text("‚ú® –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
        return
    if mode == "image":
        context.user_data["mode"] = "default"
        await update.message.reply_text("üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", reply_markup=build_keyboard())
        await update.message.chat.send_action(action=ChatAction.UPLOAD_PHOTO)
        try:
            response = client.images.generate(model="dall-e-3", prompt=text, n=1, size="1024x1024", quality="standard")
            image_url = response.data[0].url
            await update.message.reply_photo(photo=image_url, caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    history = get_chat_history(chat_id, mode)
    history.append({"role": "user", "content": text})
    system_prompts = {
        "default": "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.",
        "psychologist": "–¢—ã ‚Äî —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥.",
        "astrologer": "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥."
    }
    system_prompt = system_prompts.get(mode, system_prompts["default"])
    messages = [{"role": "system", "content": system_prompt}] + trim_chat_history(history)
    try:
        await update.message.chat.send_action(action=ChatAction.TYPING)
        response = client.chat.completions.create(model="gpt-4o", messages=messages, temperature=0.7, max_tokens=1500)
        bot_reply = response.choices[0].message.content
        history.append({"role": "assistant", "content": bot_reply})
        await update.message.reply_text(bot_reply, reply_markup=build_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ OpenAI: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main() -> None:
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ ffmpeg –Ω–∞ –º–µ—Å—Ç–µ
    await ensure_ffmpeg()

    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        while True:
            await asyncio.sleep(3600)
    finally:
        if application.updater and application.updater.running:
            await application.updater.stop()
        await application.stop()
        await application.shutdown()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
